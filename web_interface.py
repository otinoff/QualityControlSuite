"""
QualityControlSuite Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import json
import sys
import os
from datetime import datetime
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from main import QualityControlPipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="QualityControlSuite",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ –†–ì–ù–ö–¶
st.markdown("""
<style>
    :root {
        --primary-blue: #2B5AA0;
        --teal-dark: #1B5E5E;
        --accent-red: #D73527;
        --background: #FFFFFF;
        --light-bg: #F8F9FA;
        --text-primary: #333333;
        --text-secondary: #666666;
        --border-color: #E5E5E5;
        --success-color: #28A745;
        --warning-color: #FD7E14;
        --danger-color: #DC3545;
        --info-color: #17A2B8;
        --border-radius: 8px;
        --shadow: 0 2px 4px rgba(0,0,0,0.1);
        --transition: all 0.3s ease;
    }
    
    .main-header {
        text-align: center;
        padding: 2.5rem 1rem;
        background: linear-gradient(135deg, #2B5AA0 0%, #1B5E5E 100%);
        color: white;
        border-radius: var(--border-radius);
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .main-header p {
        font-size: 1.2rem;
        opacity: 0.95;
    }
    
    [data-testid="stSidebar"] {
        background-color: var(--background);
        border-right: 1px solid var(--border-color);
    }
    
    .module-card {
        background: var(--background);
        padding: 1.5rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        margin-bottom: 1.5rem;
        transition: var(--transition);
        border: 1px solid var(--border-color);
    }
    
    .module-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    [data-testid="stMetric"] {
        background: var(--background);
        padding: 1.2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        transition: var(--transition);
        border: 1px solid var(--border-color);
    }
    
    [data-testid="stMetric"]:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .stButton>button {
        border-radius: 6px;
        border: none;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        transition: var(--transition);
        box-shadow: var(--shadow);
        background-color: var(--primary-blue);
        color: white;
    }
    
    .stButton>button:hover {
        background-color: #1a4a8a;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .stProgress > div > div {
        background-color: var(--primary-blue);
    }
    
    [data-baseweb="notification"] {
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
    }
    
    .quality-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.875rem;
        font-weight: 600;
        margin: 0.25rem;
    }
    
    .quality-pass {
        background: #d4edda;
        color: #155724;
    }
    
    .quality-warning {
        background: #fff3cd;
        color: #856404;
    }
    
    .quality-fail {
        background: #f8d7da;
        color: #721c24;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'processed_files' not in st.session_state:
    st.session_state.processed_files = {}
if 'current_results' not in st.session_state:
    st.session_state.current_results = None

def render_header():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    st.markdown("""
    <div class="main-header">
        <h1>üß¨ QualityControlSuite</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
    </div>
    """, unsafe_allow_html=True)

def render_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.title("üìã –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        st.markdown("### üóÇÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
            ["üè† –ì–ª–∞–≤–Ω–∞—è", "üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤", "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", len(st.session_state.processed_files))
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", 0)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", use_container_width=True):
            st.session_state.processed_files = {}
            st.session_state.current_results = None
            st.success("–ö—ç—à –æ—á–∏—â–µ–Ω")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.info("""
        **–í–µ—Ä—Å–∏—è:** 1.0.0  
        **–õ–∏—Ü–µ–Ω–∑–∏—è:** MIT  
        **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:**
        - FASTQ/FASTQ.GZ
        - BAM/SAM/CRAM
        - VCF/VCF.GZ
        """)
        
        return page

def render_home_page():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QualityControlSuite")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ### –û —Å–∏—Å—Ç–µ–º–µ
        
        **QualityControlSuite** - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, 
        —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ TaskContract2025.
        
        #### –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
        - ‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        - üìä **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞** - —Ä–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        - üìà **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã
        - üìÑ **–û—Ç—á—ë—Ç—ã** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        
        #### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
        - üöÄ **–ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞** - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        - üì¶ **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏** - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        - üîß **–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞** - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        """)
    
    with col2:
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.markdown("### üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        status_container = st.container()
        with status_container:
            st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
            st.metric("CPU", "12%", "‚àí2%")
            st.metric("–ü–∞–º—è—Ç—å", "256 MB", "+12 MB")
            st.metric("–î–∏—Å–∫", "1.2 GB", "0")
    
    # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    st.markdown("---")
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        with st.container():
            st.markdown("""
            <div class="module-card">
                <h4>1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª</h4>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        with st.container():
            st.markdown("""
            <div class="module-card">
                <h4>2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑</h4>
                <p>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col3:
        with st.container():
            st.markdown("""
            <div class="module-card">
                <h4>3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç—á—ë—Ç</h4>
                <p>–°–∫–∞—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞</p>
            </div>
            """, unsafe_allow_html=True)

def render_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤"""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        type=['fastq', 'gz', 'bam', 'sam', 'cram', 'vcf'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: FASTQ, BAM/SAM/CRAM, VCF"
    )
    
    # –û–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            generate_plots = st.checkbox("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
            save_json = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –æ—Ç—á—ë—Ç", value=True)
            save_html = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML –æ—Ç—á—ë—Ç", value=True)
        
        with col2:
            st.markdown("#### –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            min_quality = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", 0, 40, 20)
            min_length = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–∏–¥–∞", 0, 500, 50)
            max_n_percent = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % N", 0, 20, 5)
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    if uploaded_file is not None:
        st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ò–º—è —Ñ–∞–π–ª–∞", uploaded_file.name)
        with col2:
            st.metric("–†–∞–∑–º–µ—Ä", f"{uploaded_file.size / 1024 / 1024:.2f} MB")
        with col3:
            file_type = detect_file_type(uploaded_file.name)
            st.metric("–¢–∏–ø", file_type.upper() if file_type else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            run_analysis(uploaded_file, {
                'generate_plots': generate_plots,
                'save_json': save_json,
                'save_html': save_html,
                'min_quality': min_quality,
                'min_length': min_length,
                'max_n_percent': max_n_percent
            })

def detect_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    filename_lower = filename.lower()
    if filename_lower.endswith(('.fastq', '.fastq.gz', '.fq', '.fq.gz')):
        return 'fastq'
    elif filename_lower.endswith(('.bam', '.sam', '.cram')):
        return 'bam'
    elif filename_lower.endswith(('.vcf', '.vcf.gz')):
        return 'vcf'
    return None

def run_analysis(uploaded_file, options):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞"""
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            status_text.text("üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
            progress_bar.progress(10)
            
            file_path = os.path.join(temp_dir, uploaded_file.name)
            with open(file_path, 'wb') as f:
                f.write(uploaded_file.getbuffer())
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            output_dir = os.path.join(temp_dir, 'results')
            os.makedirs(output_dir, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
            status_text.text("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞...")
            progress_bar.progress(20)
            
            pipeline = QualityControlPipeline()
            
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
            status_text.text("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
            progress_bar.progress(50)
            
            results = pipeline.process_single_file(
                filepath=file_path,
                output_dir=output_dir
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            progress_bar.progress(80)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
            file_id = f"{uploaded_file.name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            st.session_state.processed_files[file_id] = results
            st.session_state.current_results = results
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            progress_bar.progress(100)
            status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            display_results(results, uploaded_file.name)
            
            # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
            st.markdown("### üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if os.path.exists(os.path.join(output_dir, 'qc_report.html')):
                    with open(os.path.join(output_dir, 'qc_report.html'), 'rb') as f:
                        st.download_button(
                            label="üìÑ HTML –æ—Ç—á—ë—Ç",
                            data=f.read(),
                            file_name=f"qc_report_{uploaded_file.name}.html",
                            mime="text/html"
                        )
            
            with col2:
                if os.path.exists(os.path.join(output_dir, 'qc_report.json')):
                    with open(os.path.join(output_dir, 'qc_report.json'), 'rb') as f:
                        st.download_button(
                            label="üìä JSON –æ—Ç—á—ë—Ç",
                            data=f.read(),
                            file_name=f"qc_report_{uploaded_file.name}.json",
                            mime="application/json"
                        )
            
            with col3:
                if os.path.exists(os.path.join(output_dir, 'qc_report.txt')):
                    with open(os.path.join(output_dir, 'qc_report.txt'), 'rb') as f:
                        st.download_button(
                            label="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç",
                            data=f.read(),
                            file_name=f"qc_report_{uploaded_file.name}.txt",
                            mime="text/plain"
                        )
            
    except Exception as e:
        progress_bar.progress(100)
        status_text.text("")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

def display_results(results, filename):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞
    quality_status = results.get('quality_status', 'UNKNOWN')
    if quality_status == 'PASS':
        st.success("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: **–•–û–†–û–®–ï–ï**")
    elif quality_status == 'WARNING':
        st.warning("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: **–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø**")
    elif quality_status == 'FAIL':
        st.error("‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: **–ù–ò–ó–ö–û–ï**")
    else:
        st.info("‚ÑπÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: **–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û**")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("#### üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    metrics = results.get('metrics', {})
    if metrics:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        cols = st.columns(min(len(metrics), 4))
        for i, (key, value) in enumerate(metrics.items()):
            with cols[i % len(cols)]:
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if isinstance(value, float):
                    formatted_value = f"{value:.2f}"
                elif isinstance(value, int):
                    formatted_value = f"{value:,}"
                else:
                    formatted_value = str(value)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                st.metric(
                    label=format_metric_name(key),
                    value=formatted_value
                )
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if 'validation' in results:
        st.markdown("#### ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        validation = results['validation']
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**", "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if validation.get('valid') else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            if 'format' in validation:
                st.write("**–§–æ—Ä–º–∞—Ç:**", validation['format'])
        
        with col2:
            if 'errors' in validation and validation['errors']:
                st.write("**–û—à–∏–±–∫–∏:**")
                for error in validation['errors']:
                    st.write(f"- {error}")
            elif 'warnings' in validation and validation['warnings']:
                st.write("**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**")
                for warning in validation['warnings']:
                    st.write(f"- {warning}")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'plots' in results and results['plots']:
        st.markdown("#### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è plotly
        for plot_name, plot_data in results['plots'].items():
            st.write(f"**{format_metric_name(plot_name)}**")
            # st.plotly_chart(plot_data) # –µ—Å–ª–∏ plot_data - —ç—Ç–æ plotly figure

def format_metric_name(name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –º–µ—Ç—Ä–∏–∫–∏"""
    name_map = {
        'total_reads': '–í—Å–µ–≥–æ —Ä–∏–¥–æ–≤',
        'total_sequences': '–í—Å–µ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
        'mean_quality': '–°—Ä–µ–¥–Ω—è—è Q-–æ—Ü–µ–Ω–∫–∞',
        'gc_content': 'GC-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (%)',
        'mean_read_length': '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞',
        'min_read_length': '–ú–∏–Ω. –¥–ª–∏–Ω–∞',
        'max_read_length': '–ú–∞–∫—Å. –¥–ª–∏–Ω–∞',
        'n_percentage': 'N-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (%)',
        'total_bases': '–í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π',
        'mapped_reads': '–ö–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∏–¥—ã',
        'unmapped_reads': '–ù–µ–∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∏–¥—ã',
        'mean_coverage': '–°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
        'total_variants': '–í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
        'snp_count': 'SNP',
        'indel_count': '–ò–Ω–¥–µ–ª—ã',
        'mean_variant_quality': '–°—Ä–µ–¥–Ω—è—è Q –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
    }
    return name_map.get(name, name.replace('_', ' ').title())

def render_results_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    st.title("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    if not st.session_state.processed_files:
        st.info("üìã –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DataFrame
    results_data = []
    for file_id, results in st.session_state.processed_files.items():
        metrics = results.get('metrics', {})
        results_data.append({
            'ID': file_id,
            '–°—Ç–∞—Ç—É—Å': results.get('quality_status', 'UNKNOWN'),
            '–†–∏–¥–æ–≤': metrics.get('total_reads', 0),
            '–°—Ä–µ–¥–Ω—è—è Q': metrics.get('mean_quality', 0),
            'GC %': metrics.get('gc_content', 0)
        })
    
    df = pd.DataFrame(results_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True
    )
    
    # –í—ã–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if len(st.session_state.processed_files) > 0:
        selected_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            list(st.session_state.processed_files.keys())
        )
        
        if selected_id:
            st.markdown("---")
            selected_results = st.session_state.processed_files[selected_id]
            display_results(selected_results, selected_id.split('_')[0])

def render_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    st.markdown("### üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### FASTQ")
        fastq_min_quality = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è Q-–æ—Ü–µ–Ω–∫–∞", value=20, min_value=0, max_value=60)
        fastq_min_length = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–∏–¥–∞", value=50, min_value=0)
        fastq_max_n = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % N", value=5, min_value=0, max_value=100)
    
    with col2:
        st.markdown("#### BAM/SAM")
        bam_min_mapping = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", value=30, min_value=0, max_value=60)
        bam_min_coverage = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", value=10, min_value=0)
        bam_max_unmapped = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –Ω–µ–∫–∞—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", value=10, min_value=0, max_value=100)
    
    st.markdown("#### VCF")
    vcf_min_quality = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", value=30, min_value=0, max_value=100)
    vcf_min_depth = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞", value=10, min_value=0)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
    st.markdown("### üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### –§–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞")
        generate_html = st.checkbox("HTML –æ—Ç—á—ë—Ç", value=True)
        generate_json = st.checkbox("JSON –æ—Ç—á—ë—Ç", value=True)
        generate_txt = st.checkbox("–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç", value=True)
    
    with col2:
        st.markdown("#### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        generate_plots = st.checkbox("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
        plot_style = st.selectbox("–°—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤", ["plotly", "matplotlib"])
        plot_theme = st.selectbox("–¢–µ–º–∞", ["light", "dark", "auto"])
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary", use_container_width=True):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def render_documentation_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    st.title("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "üîß API", "‚ùì FAQ", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
    
    with tab1:
        st.markdown("""
        ### –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        #### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        
        1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞**
           - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤"
           - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª
           - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: FASTQ, BAM/SAM, VCF
        
        2. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤**
           - –†–∞—Å–∫—Ä–æ–π—Ç–µ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞"
           - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
           - –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á—ë—Ç–æ–≤
        
        3. **–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞**
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
           - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
           - –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        4. **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤**
           - –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
           - –ù–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
        #### üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        **–°—Ç–∞—Ç—É—Å—ã –∫–∞—á–µ—Å—Ç–≤–∞:**
        - üü¢ **PASS** - –¥–∞–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        - üü° **WARNING** - –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        - üî¥ **FAIL** - –¥–∞–Ω–Ω—ã–µ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        
        **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
        - **Q-–æ—Ü–µ–Ω–∫–∞** - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ–∫–≤–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (>30 –æ—Ç–ª–∏—á–Ω–æ, 20-30 —Ö–æ—Ä–æ—à–æ, <20 –ø–ª–æ—Ö–æ)
        - **GC-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ** - –ø—Ä–æ—Ü–µ–Ω—Ç –≥—É–∞–Ω–∏–Ω–∞ –∏ —Ü–∏—Ç–æ–∑–∏–Ω–∞ (–Ω–æ—Ä–º–∞ 40-60%)
        - **–î–ª–∏–Ω–∞ —Ä–∏–¥–æ–≤** - –≤–∞–∂–Ω–∞ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–±–æ—Ä–∫–∏
        """)
    
    with tab2:
        st.markdown("""
        ### API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        
        #### Python API
        
        ```python
        from main import QualityControlPipeline
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        pipeline = QualityControlPipeline()
        
        # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        results = pipeline.process_single_file(
            filepath='path/to/file.fastq',
            output_dir='results/'
        )
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        results = pipeline.process_batch(
            input_dir='data/',
            output_dir='results/',
            file_pattern='*.fastq'
        )
        ```
        
        #### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        ```json
        {
            "file_type": "fastq",
            "validation": {
                "valid": true,
                "format": "FASTQ"
            },
            "metrics": {
                "total_reads": 100000,
                "mean_quality": 32.5,
                "gc_content": 45.2
            },
            "quality_status": "PASS"
        }
        ```
        """)
    
    with tab3:
        st.markdown("""
        ### –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        
        **Q: –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**
        A: FASTQ, FASTQ.GZ, BAM, SAM, CRAM, VCF, VCF.GZ
        
        **Q: –ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞?**
        A: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 2 GB –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI.
        
        **Q: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –≥–µ–Ω–æ–º?**
        A: –ù–µ—Ç, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–π–ª–∞—Ö.
        
        **Q: –ú–æ–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è?**
        A: –î–∞, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.
        
        **Q: –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?**
        A: –°–º. —Ä–∞–∑–¥–µ–ª "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫.
        """)
    
    with tab4:
        st.markdown("""
        ### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        
        **GitHub:** https://github.com/otinoff/QualityControlSuite
        
        **Email:** support@qualitycontrolsuite.onff.ru
        
        **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:** https://qualitycontrolsuite.onff.ru/docs
        
        #### –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ
        
        –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:
        - –í–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã
        - –¢–∏–ø –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        - –®–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        """)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    render_header()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = render_sidebar()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        render_home_page()
    elif page == "üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤":
        render_analysis_page()
    elif page == "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã":
        render_results_page()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        render_settings_page()
    elif page == "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è":
        render_documentation_page()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p>QualityControlSuite v1.0.0 | ¬© 2025 TaskContract2025 | MIT License</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()