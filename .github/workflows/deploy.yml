name: Deploy FastQCLI to Server

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      server_environment:
        description: 'Server environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  test:
    name: Test FastQCLI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_exe.txt
    
    - name: Test Installation
      run: |
        python -c "import sequali; print('Sequali OK')"
        python -c "import streamlit; print('Streamlit OK')"
        python -c "import fastqcli; print('FastQCLI OK')"
    
    - name: Run Unit Tests
      run: |
        python -m pytest tests/ -v || echo "No tests found or tests failed"
  
  deploy:
    name: Deploy to Server
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.1
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
    
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
    
    - name: Clean Server Directory
      run: |
        echo "Cleaning server directory..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          if [ -d '${{ secrets.SERVER_PATH }}' ]; then
            echo 'Directory exists, cleaning contents...'
            cd ${{ secrets.SERVER_PATH }}
            rm -rf *
            echo 'Directory cleaned'
          else
            echo 'Directory does not exist, creating...'
            mkdir -p ${{ secrets.SERVER_PATH }}
          fi
        "
    
    - name: Deploy Files to Server
      run: |
        echo "Deploying files to server..."
        # Create deployment package
        tar -czf deploy_package.tar.gz fastqcli.py streamlit_*.py build_exe.py requirements*.txt run_streamlit.bat compile.bat test_files/ README*.md QUICK_START_RU.md scripts/ deploy_to_server.py deploy.bat 2>/dev/null || echo "Some files not found, continuing..."
        
        # Copy to server
        scp -o StrictHostKeyChecking=no deploy_package.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PATH }}/
        
        # Extract on server
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.SERVER_PATH }}
          tar -xzf deploy_package.tar.gz
          rm deploy_package.tar.gz
        "
    
    - name: Install Dependencies on Server
      run: |
        echo "Installing dependencies on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.SERVER_PATH }}
          export PATH=\$PATH:~/.local/bin
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user -r requirements.txt || echo 'requirements.txt not found or installation failed'
          python3 -m pip install --user -r requirements_exe.txt || echo 'requirements_exe.txt not found or installation failed'
          python3 -c 'import sequali' 2>/dev/null || python3 -m pip install --user sequali
        "
    
    - name: Test Server Installation
      run: |
        echo "Testing server installation..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.SERVER_PATH }}
          export PATH=\$PATH:~/.local/bin
          python3 -c 'import fastqcli; print(\"FastQCLI imported successfully\")'
          python3 -c 'import sequali; print(\"Sequali imported successfully\")'
          python3 -c 'import streamlit; print(\"Streamlit imported successfully\")'
        "
    
    - name: Start Services (if needed)
      run: |
        echo "Starting services..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd ${{ secrets.SERVER_PATH }}
          # Add any service start commands here if needed
          echo 'Services started'
        "
    
    - name: Deploy to Staging Server
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.server_environment == 'staging'
      run: |
        echo "Deploying to staging server..."
        # Staging deployment commands
        echo "Staging deployment not yet configured"
    
    - name: Deploy to Development Server
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.server_environment == 'development'
      run: |
        echo "Deploying to development server..."
        # Development deployment commands
        echo "Development deployment not yet configured"
    
    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false