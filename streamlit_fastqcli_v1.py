"""
FastQCLI Streamlit Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ FASTQ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Sequali
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import json
import sys
import os
from datetime import datetime
import tempfile
import shutil
import subprocess
import time
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="FastQCLI - Sequali",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ fastqcli.py
try:
    from fastqcli import (
        check_and_install_sequali,
        analyze_with_sequali,
        has_command,
        is_package_installed
    )
    FASTQCLI_AVAILABLE = True
except ImportError:
    FASTQCLI_AVAILABLE = False
    st.error("‚ö†Ô∏è –§–∞–π–ª fastqcli.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.")

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    :root {
        --primary-blue: #2B5AA0;
        --teal-dark: #1B5E5E;
        --accent-red: #D73527;
        --success-green: #28A745;
        --warning-yellow: #FD7E14;
        --background: #FFFFFF;
        --light-bg: #F8F9FA;
        --text-primary: #333333;
        --border-color: #E5E5E5;
        --shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .main-header {
        text-align: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, #2B5AA0 0%, #1B5E5E 100%);
        color: white;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .main-header p {
        font-size: 1.1rem;
        opacity: 0.95;
        margin: 0;
    }
    
    .status-card {
        background: var(--background);
        padding: 1.2rem;
        border-radius: 8px;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        margin-bottom: 1rem;
    }
    
    .metric-card {
        background: var(--background);
        padding: 1rem;
        border-radius: 8px;
        box-shadow: var(--shadow);
        border-left: 4px solid var(--primary-blue);
        margin-bottom: 1rem;
    }
    
    .quality-pass {
        background: #d4edda;
        color: #155724;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 600;
    }
    
    .quality-warning {
        background: #fff3cd;
        color: #856404;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 600;
    }
    
    .quality-fail {
        background: #f8d7da;
        color: #721c24;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 600;
    }
    
    .speed-indicator {
        color: var(--primary-blue);
        font-weight: bold;
        font-size: 1.2rem;
    }
    
    [data-testid="stSidebar"] {
        background-color: var(--light-bg);
    }
    
    .stButton>button {
        background-color: var(--primary-blue);
        color: white;
        border: none;
        padding: 0.5rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        background-color: #1a4a8a;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'analysis_history' not in st.session_state:
    st.session_state.analysis_history = []
if 'sequali_installed' not in st.session_state:
    st.session_state.sequali_installed = False
if 'current_results' not in st.session_state:
    st.session_state.current_results = None


def render_header():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    st.markdown("""
    <div class="main-header">
        <h1>üß¨ FastQCLI - Powered by Sequali</h1>
        <p>–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ FASTQ —Ñ–∞–π–ª–æ–≤ (300+ MB/sec)</p>
    </div>
    """, unsafe_allow_html=True)


def render_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –≤–µ—Ä—Å–∏—è
        st.markdown("""
        <div style='text-align: center; padding: 1rem 0;'>
            <h3 style='margin: 0;'>üß¨ FastQCLI</h3>
            <p style='margin: 0.5rem 0 0 0; font-size: 0.9rem; opacity: 0.8;'>v1.0.0 | Sequali Engine</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.markdown("### üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        col1, col2 = st.columns(2)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        with col1:
            python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
            st.metric("Python", python_version)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Sequali
        with col2:
            if FASTQCLI_AVAILABLE and has_command('sequali'):
                st.metric("Sequali", "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                st.session_state.sequali_installed = True
            else:
                st.metric("Sequali", "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                st.session_state.sequali_installed = False
        
        st.divider()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("### ‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        st.markdown("""
        **FastQCLI** - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ FASTQ —Ñ–∞–π–ª–æ–≤, 
        –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ Sequali.
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å 300+ MB/sec
        - üîß –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        - üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        - üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        - üìÑ HTML/JSON –æ—Ç—á–µ—Ç—ã
        
        **–ú–µ—Ç—Ä–∏–∫–∏:**
        - Q20/Q30 –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        - GC —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        - –î–ª–∏–Ω–∞ —Ä–∏–¥–æ–≤
        - N-—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–ø–ª–∏–∫–∞—Ç–æ–≤
        """)
        
        st.divider()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
        if st.session_state.analysis_history:
            st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
            for i, record in enumerate(reversed(st.session_state.analysis_history[-5:]), 1):
                status_icon = "‚úÖ" if record['status'] == 'success' else "‚ùå"
                st.text(f"{status_icon} {record['filename'][:20]}...")
                st.caption(f"  {record['time']}")


def check_sequali_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sequali"""
    if not FASTQCLI_AVAILABLE:
        return False
    
    if not st.session_state.sequali_installed:
        with st.spinner("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Sequali..."):
            if not has_command('sequali'):
                st.info("üì¶ Sequali –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                progress = st.progress(0)
                status = st.empty()
                
                status.text("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Sequali —á–µ—Ä–µ–∑ pip...")
                progress.progress(30)
                
                if check_and_install_sequali():
                    progress.progress(100)
                    status.text("‚úÖ Sequali —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    st.session_state.sequali_installed = True
                    time.sleep(1)
                    st.rerun()
                else:
                    progress.progress(100)
                    status.text("")
                    st.error("""
                    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Sequali –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:
                    ```bash
                    pip install sequali
                    ```
                    """)
                    return False
            else:
                st.session_state.sequali_installed = True
    
    return True


def parse_sequali_json(json_path: Path) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Sequali"""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        summary = data.get('summary', {})
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        metrics = {
            'total_reads': summary.get('read_count', 0),
            'total_bases': summary.get('base_count', 0),
            'mean_length': summary.get('mean_read_length', 0),
            'min_length': summary.get('min_read_length', 0),
            'max_length': summary.get('max_read_length', 0),
            'gc_content': summary.get('gc_content', 0) * 100,
            'q20_rate': summary.get('q20_rate', 0) * 100,
            'q30_rate': summary.get('q30_rate', 0) * 100,
            'n_rate': summary.get('n_rate', 0) * 100 if 'n_rate' in summary else 0
        }
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        if metrics['q30_rate'] >= 80:
            quality_status = 'PASS'
        elif metrics['q30_rate'] >= 70:
            quality_status = 'WARNING'
        else:
            quality_status = 'FAIL'
        
        return {
            'metrics': metrics,
            'quality_status': quality_status,
            'raw_data': data
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return None


def run_sequali_analysis(file_path: str, output_dir: str, options: Dict[str, Any]):
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Sequali"""
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_bar = st.progress(0)
    status_text = st.empty()
    metrics_container = st.container()
    
    try:
        # –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
        status_text.text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ Sequali...")
        progress_bar.progress(20)
        
        start_time = time.time()
        file_size_mb = Path(file_path).stat().st_size / (1024 * 1024)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        col1, col2, col3 = metrics_container.columns(3)
        with col1:
            size_metric = st.metric("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{file_size_mb:.1f} MB")
        with col2:
            speed_metric = st.metric("–°–∫–æ—Ä–æ—Å—Ç—å", "–†–∞—Å—á–µ—Ç...")
        with col3:
            time_metric = st.metric("–í—Ä–µ–º—è", "0 —Å–µ–∫")
        
        progress_bar.progress(40)
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        st.write(f"DEBUG: Analyzing file: {file_path}")
        st.write(f"DEBUG: Output directory: {output_dir}")
        
        success = analyze_with_sequali(
            file_path,
            output_dir=output_dir,
            save_json=options.get('save_json', True),
            save_html=options.get('save_html', True)
        )
        
        elapsed_time = time.time() - start_time
        speed_mbps = file_size_mb / elapsed_time if elapsed_time > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        with col2:
            st.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{speed_mbps:.1f} MB/sec")
        with col3:
            st.metric("–í—Ä–µ–º—è", f"{elapsed_time:.1f} —Å–µ–∫")
        
        progress_bar.progress(80)
        
        if success:
            status_text.text("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
            st.write("DEBUG: Files in output dir after analysis:")
            output_files = list(Path(output_dir).glob("*"))
            for file in output_files:
                st.write(f"  - {file.name}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
            json_path = None
            possible_names = [
                f"{Path(file_path).name}.json",  # –° –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º –≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                f"{Path(file_path).stem}.json",   # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –∏–º—è
            ]
            
            for name in possible_names:
                test_path = Path(output_dir) / name
                st.write(f"DEBUG: Checking for {test_path}")
                if test_path.exists():
                    json_path = test_path
                    st.write(f"DEBUG: Found JSON at {json_path}")
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º, –∏—â–µ–º –ª—é–±–æ–π JSON —Ñ–∞–π–ª
            if json_path is None:
                json_files = list(Path(output_dir).glob("*.json"))
                if json_files:
                    json_path = json_files[0]
                    st.write(f"DEBUG: Using first JSON file found: {json_path.name}")
            
            if json_path and json_path.exists():
                results = parse_sequali_json(json_path)
                
                progress_bar.progress(100)
                status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.analysis_history.append({
                    'filename': Path(file_path).name,
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'status': 'success',
                    'speed': speed_mbps,
                    'elapsed': elapsed_time
                })
                
                return results
            else:
                st.error("JSON —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        else:
            progress_bar.progress(100)
            status_text.text("")
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞")
            
            st.session_state.analysis_history.append({
                'filename': Path(file_path).name,
                'time': datetime.now().strftime("%H:%M:%S"),
                'status': 'error',
                'speed': 0,
                'elapsed': elapsed_time
            })
            
            return None
            
    except Exception as e:
        progress_bar.progress(100)
        status_text.text("")
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None


def display_results(results: Dict[str, Any], filename: str, output_dir: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –°—Ç–∞—Ç—É—Å –∫–∞—á–µ—Å—Ç–≤–∞
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    quality_status = results.get('quality_status', 'UNKNOWN')
    if quality_status == 'PASS':
        st.markdown('<div class="quality-pass">‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –û–¢–õ–ò–ß–ù–û–ï</div>', unsafe_allow_html=True)
    elif quality_status == 'WARNING':
        st.markdown('<div class="quality-warning">‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="quality-fail">‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –ù–ò–ó–ö–û–ï</div>', unsafe_allow_html=True)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("#### üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    metrics = results.get('metrics', {})
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ —Ä–∏–¥–æ–≤",
            f"{metrics.get('total_reads', 0):,}"
        )
        st.metric(
            "–í—Å–µ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–π",
            f"{metrics.get('total_bases', 0):,}"
        )
    
    with col2:
        st.metric(
            "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞",
            f"{metrics.get('mean_length', 0):.1f} bp"
        )
        st.metric(
            "–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏–Ω",
            f"{metrics.get('min_length', 0)}-{metrics.get('max_length', 0)}"
        )
    
    with col3:
        q30 = metrics.get('q30_rate', 0)
        st.metric(
            "Q30",
            f"{q30:.1f}%",
            delta=f"{q30-80:.1f}%" if q30 != 0 else None
        )
        q20 = metrics.get('q20_rate', 0)
        st.metric(
            "Q20",
            f"{q20:.1f}%",
            delta=f"{q20-90:.1f}%" if q20 != 0 else None
        )
    
    with col4:
        gc = metrics.get('gc_content', 0)
        st.metric(
            "GC —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            f"{gc:.1f}%",
            delta=f"{gc-50:.1f}%" if gc != 0 else None
        )
        n_rate = metrics.get('n_rate', 0)
        st.metric(
            "N —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            f"{n_rate:.3f}%",
            delta=f"{n_rate:.3f}%" if n_rate > 1 else None
        )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if results.get('raw_data'):
        st.markdown("#### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        tab1, tab2, tab3 = st.tabs(["–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω", "GC —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"])
        
        with tab1:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏–∑ raw_data
            st.info("–ì—Ä–∞—Ñ–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
        
        with tab2:
            st.info("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
        
        with tab3:
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ GC
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = gc,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "GC Content (%)"},
                gauge = {
                    'axis': {'range': [None, 100]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 40], 'color': "lightgray"},
                        {'range': [40, 60], 'color': "gray"},
                        {'range': [60, 100], 'color': "lightgray"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 50
                    }
                }
            ))
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.markdown("#### üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
    
    col1, col2 = st.columns(2)
    
    output_path = Path(output_dir)
    base_name = Path(filename).stem
    full_name = Path(filename).name
    
    with col1:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
        html_path = None
        possible_html = [
            output_path / f"{full_name}.html",
            output_path / f"{base_name}.html"
        ]
        
        for path in possible_html:
            if path.exists():
                html_path = path
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±–æ–π HTML
        if not html_path:
            html_files = list(output_path.glob("*.html"))
            if html_files:
                html_path = html_files[0]
        
        if html_path and html_path.exists():
            with open(html_path, 'rb') as f:
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç",
                    data=f.read(),
                    file_name=f"{base_name}_report.html",
                    mime="text/html"
                )
    
    with col2:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
        json_path = None
        possible_json = [
            output_path / f"{full_name}.json",
            output_path / f"{base_name}.json"
        ]
        
        for path in possible_json:
            if path.exists():
                json_path = path
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±–æ–π JSON
        if not json_path:
            json_files = list(output_path.glob("*.json"))
            if json_files:
                json_path = json_files[0]
        
        if json_path and json_path.exists():
            with open(json_path, 'rb') as f:
                st.download_button(
                    label="üìä –°–∫–∞—á–∞—Ç—å JSON –¥–∞–Ω–Ω—ã–µ",
                    data=f.read(),
                    file_name=f"{base_name}_data.json",
                    mime="application/json"
                )


def render_analysis_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ FASTQ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sequali
    if not check_sequali_installation():
        st.error("Sequali –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ FASTQ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        type=['fastq', 'fq', 'gz'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .fastq, .fq, .fastq.gz, .fq.gz"
    )
    
    # –û–ø—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    with st.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            save_html = st.checkbox("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç", value=True)
            save_json = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ", value=True)
        
        with col2:
            st.info("""
            **Sequali –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç:**
            - Q20/Q30 –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            - GC —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª–∏–Ω
            - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            - –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...
            """)
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
    if uploaded_file is not None:
        st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ò–º—è —Ñ–∞–π–ª–∞", uploaded_file.name[:30] + "..." if len(uploaded_file.name) > 30 else uploaded_file.name)
        with col2:
            file_size_mb = uploaded_file.size / (1024 * 1024)
            st.metric("–†–∞–∑–º–µ—Ä", f"{file_size_mb:.2f} MB")
        with col3:
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (300 MB/sec)
            estimated_time = file_size_mb / 300
            st.metric("–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", f"~{estimated_time:.1f} —Å–µ–∫")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path = os.path.join(temp_dir, uploaded_file.name)
                with open(file_path, 'wb') as f:
                    f.write(uploaded_file.getbuffer())
                
                # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                output_dir = os.path.join(temp_dir, 'results')
                os.makedirs(output_dir, exist_ok=True)
                
                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                results = run_sequali_analysis(
                    file_path,
                    output_dir,
                    {
                        'save_html': save_html,
                        'save_json': save_json
                    }
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if results:
                    st.session_state.current_results = results
                    display_results(results, uploaded_file.name, output_dir)


def render_batch_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    st.title("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    
    st.info("""
    –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ FASTQ —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
    
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
    1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
    4. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    """)
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ FASTQ —Ñ–∞–π–ª—ã",
        type=['fastq', 'fq', 'gz'],
        accept_multiple_files=True,
        help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤"
    )
    
    if uploaded_files:
        st.markdown(f"### –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤
        file_data = []
        total_size = 0
        for f in uploaded_files:
            size_mb = f.size / (1024 * 1024)
            total_size += size_mb
            file_data.append({
                '–§–∞–π–ª': f.name[:40] + "..." if len(f.name) > 40 else f.name,
                '–†–∞–∑–º–µ—Ä (MB)': f"{size_mb:.2f}"
            })
        
        df = pd.DataFrame(file_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
        
        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        estimated_time = total_size / 300  # 300 MB/sec
        st.info(f"""
        **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:** {total_size:.2f} MB  
        **–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:** ~{estimated_time:.1f} —Å–µ–∫ ({estimated_time/60:.1f} –º–∏–Ω)
        """)
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            st.warning("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")


def render_settings_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    st.markdown("### üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Sequali")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
        if st.button("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Sequali"):
            with st.spinner("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sequali..."):
                result = subprocess.run(
                    [sys.executable, '-m', 'pip', 'install', '--upgrade', 'sequali'],
                    capture_output=True,
                    text=True
                )
                if result.returncode == 0:
                    st.success("‚úÖ Sequali —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.stderr}")
    
    with col2:
        st.markdown("#### –í–µ—Ä—Å–∏—è")
        if has_command('sequali'):
            result = subprocess.run(['sequali', '--version'], capture_output=True, text=True)
            version = result.stdout.strip() if result.stdout else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            st.info(f"Sequali –≤–µ—Ä—Å–∏—è: {version}")
        else:
            st.warning("Sequali –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    st.markdown("### üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### –§–æ—Ä–º–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        html_default = st.checkbox("HTML –æ—Ç—á–µ—Ç", value=True, key="settings_html")
        json_default = st.checkbox("JSON –¥–∞–Ω–Ω—ã–µ", value=True, key="settings_json")
    
    with col2:
        st.markdown("#### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
        auto_open = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å HTML", value=False)
        keep_temp = st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", value=False)
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


def render_documentation_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    st.title("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    tab1, tab2, tab3, tab4 = st.tabs(["–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "–û Sequali", "FAQ", "API"])
    
    with tab1:
        st.markdown("""
        ### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        
        1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞**
           - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª
           - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: .fastq, .fq, .fastq.gz, .fq.gz
        
        2. **–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞**
           - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
           - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å–∫–æ—Ä–æ—Å—Ç—å ~300 MB/sec)
        
        3. **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**
           - –ò–∑—É—á–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
           - –°–∫–∞—á–∞–π—Ç–µ HTML –∏–ª–∏ JSON –æ—Ç—á–µ—Ç
        
        ### üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        **Q-scores (Quality scores):**
        - **Q30 > 80%** - –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        - **Q30 70-80%** - –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        - **Q30 < 70%** - –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
        
        **GC —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
        - **40-60%** - –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤
        - **< 40% –∏–ª–∏ > 60%** - –ú–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏—é –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑—Ü–∞
        
        **N —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
        - **< 1%** - –û—Ç–ª–∏—á–Ω–æ
        - **1-5%** - –ü—Ä–∏–µ–º–ª–µ–º–æ
        - **> 5%** - –ú–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑
        """)
    
    with tab2:
        st.markdown("""
        ### üöÄ –û Sequali
        
        **Sequali** - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ FastQC, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ Rust.
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - ‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å**: 300+ MB/sec (–≤ 3-4 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ FastQC)
        - üîß **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**: –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        - üìä **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ FastQC –∏ –±–æ–ª—å—à–µ
        - üåê **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**: –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        
        **–ê–≤—Ç–æ—Ä:** Ruben Vorderman  
        **–õ–∏—Ü–µ–Ω–∑–∏—è:** MIT  
        **GitHub:** https://github.com/rhpvorderman/sequali
        
        ### –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
        
        Sequali –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
        - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        - SIMD –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–∂–∞—Ç–∏—è
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        """)
    
    with tab3:
        st.markdown("""
        ### ‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        
        **Q: –ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞?**  
        A: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç. Sequali —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
        
        **Q: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª–∏ —Å–∂–∞—Ç—ã–µ —Ñ–∞–π–ª—ã?**  
        A: –î–∞, .fastq.gz –∏ .fq.gz –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        
        **Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É?**  
        A: –î–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ fastqcli.py –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        
        **Q: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã?**  
        A: –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ Sequali. –î–∞–ª–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω.
        
        **Q: –ö–∞–∫ —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤?**  
        A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞" (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
        """)
    
    with tab4:
        st.markdown("""
        ### üîß Python API
        
        ```python
        from fastqcli import analyze_with_sequali
        
        # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        success = analyze_with_sequali(
            'sample.fastq',
            output_dir='results/',
            save_json=True,
            save_html=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sequali
        from fastqcli import check_and_install_sequali
        if check_and_install_sequali():
            print("Sequali –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ```
        
        ### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        ```json
        {
            "summary": {
                "read_count": 1000000,
                "base_count": 150000000,
                "mean_read_length": 150.0,
                "gc_content": 0.45,
                "q20_rate": 0.95,
                "q30_rate": 0.85
            }
        }
        ```
        """)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è fastqcli.py
    if not FASTQCLI_AVAILABLE:
        st.error("""
        ‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**: —Ñ–∞–π–ª `fastqcli.py` –Ω–µ –Ω–∞–π–¥–µ–Ω!
        
        **–†–µ—à–µ–Ω–∏–µ:**
        1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `fastqcli.py` –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º
        2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """)
        st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    render_header()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    render_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞",
        "üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    ])
    
    with tab1:
        render_analysis_page()
    
    with tab2:
        render_batch_page()
    
    with tab3:
        render_settings_page()
    
    with tab4:
        render_documentation_page()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p>FastQCLI v1.0.0 | Powered by Sequali | ¬© 2025 TaskContract2025</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()