"""
FastQCLI Simplified Streamlit Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ FASTQ —Ñ–∞–π–ª–æ–≤ —Å HTML –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–í–µ—Ä—Å–∏—è: 2.0.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import streamlit as st
import streamlit.components.v1 as components
from pathlib import Path
import sys
import os
from datetime import datetime
import tempfile
import time
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="FastQCLI - Simple",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ fastqcli.py
try:
    from fastqcli import (
        check_and_install_sequali,
        analyze_with_sequali,
        has_command
    )
    FASTQCLI_AVAILABLE = True
except ImportError:
    FASTQCLI_AVAILABLE = False
    st.error("‚ö†Ô∏è –§–∞–π–ª fastqcli.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.")

# CSS —Å—Ç–∏–ª–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ)
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .main-header p {
        font-size: 1.1rem;
        opacity: 0.95;
    }
    
    .metrics-container {
        background: #f7f7f7;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 6px;
        border-left: 4px solid #28a745;
    }
    
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 6px;
        border-left: 4px solid #dc3545;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'sequali_installed' not in st.session_state:
    st.session_state.sequali_installed = False
if 'analysis_history' not in st.session_state:
    st.session_state.analysis_history = []


def render_header():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    st.markdown("""
    <div class="main-header">
        <h1>üß¨ FastQCLI Simplified</h1>
        <p>HTML –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ Sequali - –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ!</p>
    </div>
    """, unsafe_allow_html=True)


def check_sequali_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sequali"""
    if not FASTQCLI_AVAILABLE:
        return False
    
    if not st.session_state.sequali_installed:
        with st.spinner("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Sequali..."):
            if not has_command('sequali'):
                st.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Sequali...")
                if check_and_install_sequali():
                    st.session_state.sequali_installed = True
                    st.success("‚úÖ Sequali —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Sequali –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    return False
            else:
                st.session_state.sequali_installed = True
    
    return True


def run_simple_analysis(file_path: str, output_dir: str) -> Optional[str]:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - —Ç–æ–ª—å–∫–æ HTML, –±–µ–∑ JSON!
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É –∏–ª–∏ None
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    log_container = st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞", expanded=True)
    logs = []
    
    def add_log(message: str, level: str = "INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        log_msg = f"[{timestamp}] [{level}] {message}"
        logs.append(log_msg)
        with log_container:
            if level == "ERROR":
                st.error(log_msg)
            elif level == "WARNING":
                st.warning(log_msg)
            elif level == "SUCCESS":
                st.success(log_msg)
            else:
                st.text(log_msg)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
        add_log(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
        add_log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {output_dir}")
        
        status_text.text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ Sequali...")
        progress_bar.progress(20)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not Path(file_path).exists():
            add_log(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}", "ERROR")
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        start_time = time.time()
        file_size_mb = Path(file_path).stat().st_size / (1024 * 1024)
        add_log(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{file_size_mb:.1f} MB")
        with col2:
            speed_placeholder = st.empty()
            speed_placeholder.metric("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å", "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        with col3:
            time_placeholder = st.empty()
            time_placeholder.metric("‚è±Ô∏è –í—Ä–µ–º—è", "0 —Å–µ–∫")
        
        progress_bar.progress(40)
        
        # –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –ë–ï–ó JSON!
        add_log("–ó–∞–ø—É—Å–∫–∞—é analyze_with_sequali (HTML only, –±–µ–∑ JSON)")
        add_log(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: save_json=False, save_html=True")
        
        try:
            success = analyze_with_sequali(
                file_path,
                output_dir=output_dir,
                save_json=False,  # –ù–ï –°–û–ó–î–ê–ï–ú JSON!
                save_html=True    # –¢–æ–ª—å–∫–æ HTML
            )
            add_log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç analyze_with_sequali: {success}")
        except Exception as e:
            add_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ analyze_with_sequali: {str(e)}", "ERROR")
            raise
        
        elapsed_time = time.time() - start_time
        speed_mbps = file_size_mb / elapsed_time if elapsed_time > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        speed_placeholder.metric("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å", f"{speed_mbps:.1f} MB/sec")
        time_placeholder.metric("‚è±Ô∏è –í—Ä–µ–º—è", f"{elapsed_time:.1f} —Å–µ–∫")
        add_log(f"–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {speed_mbps:.1f} MB/sec")
        add_log(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time:.1f} —Å–µ–∫")
        
        progress_bar.progress(80)
        
        if success:
            status_text.text("üìä –ó–∞–≥—Ä—É–∂–∞—é HTML –æ—Ç—á–µ—Ç...")
            add_log("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∏—â—É HTML —Ñ–∞–π–ª", "SUCCESS")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            add_log(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {output_dir}:")
            try:
                files_in_dir = list(Path(output_dir).glob("*"))
                if files_in_dir:
                    for f in files_in_dir:
                        add_log(f"  - {f.name} ({f.stat().st_size} –±–∞–π—Ç)")
                else:
                    add_log("  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!", "WARNING")
            except Exception as e:
                add_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", "ERROR")
            
            # –ò—â–µ–º HTML —Ñ–∞–π–ª
            html_path = None
            possible_names = [
                f"{Path(file_path).name}.html",
                f"{Path(file_path).stem}.html",
            ]
            
            add_log("–ü—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ HTML –ø–æ –∏–º–µ–Ω–∞–º:")
            for name in possible_names:
                test_path = Path(output_dir) / name
                add_log(f"  –ü—Ä–æ–≤–µ—Ä—è—é: {test_path}")
                if test_path.exists():
                    html_path = test_path
                    add_log(f"  ‚úì –ù–∞–π–¥–µ–Ω: {html_path}", "SUCCESS")
                    break
                else:
                    add_log(f"  ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π HTML
            if not html_path:
                add_log("–ù–µ –Ω–∞—à–µ–ª –ø–æ –∏–º–µ–Ω–∞–º, –∏—â—É –ª—é–±–æ–π HTML —Ñ–∞–π–ª")
                html_files = list(Path(output_dir).glob("*.html"))
                if html_files:
                    html_path = html_files[0]
                    add_log(f"–ù–∞–π–¥–µ–Ω HTML —Ñ–∞–π–ª: {html_path.name}", "SUCCESS")
                else:
                    add_log("HTML —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!", "ERROR")
            
            progress_bar.progress(100)
            status_text.text("")
            
            if html_path and html_path.exists():
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.analysis_history.append({
                    'filename': Path(file_path).name,
                    'time': datetime.now().strftime("%H:%M:%S"),
                    'speed': f"{speed_mbps:.1f} MB/sec",
                    'elapsed': f"{elapsed_time:.1f} —Å–µ–∫"
                })
                
                add_log(f"–í–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Ç—å –∫ HTML: {html_path}", "SUCCESS")
                return str(html_path)
            else:
                add_log("HTML –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫", "ERROR")
                st.error("HTML –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        else:
            progress_bar.progress(100)
            status_text.text("")
            add_log("analyze_with_sequali –≤–µ—Ä–Ω—É–ª False", "ERROR")
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞")
            return None
            
    except Exception as e:
        progress_bar.progress(100)
        status_text.text("")
        add_log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None


def display_html_report(html_path: str):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –≤ Streamlit
    """
    try:
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        st.markdown("### üìä –û—Ç—á–µ—Ç Sequali")
        
        # –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2 = st.columns([3, 1])
        with col1:
            st.info("üí° –û—Ç—á–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω –Ω–∏–∂–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π.")
        with col2:
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å HTML",
                data=html_content,
                file_name=f"sequali_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                mime="text/html"
            )
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTML —á–µ—Ä–µ–∑ iframe
        components.html(
            html_content,
            height=900,  # –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
            scrolling=True
        )
        
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ HTML: {str(e)}")
        return False


def render_sidebar():
    """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å"""
    with st.sidebar:
        st.markdown("### üß¨ FastQCLI Simplified")
        st.caption("v2.0.0 | HTML Proxy Mode")
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.markdown("#### üìä –°—Ç–∞—Ç—É—Å")
        
        col1, col2 = st.columns(2)
        with col1:
            python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
            st.metric("Python", python_version)
        
        with col2:
            if FASTQCLI_AVAILABLE and has_command('sequali'):
                st.metric("Sequali", "‚úÖ")
            else:
                st.metric("Sequali", "‚ùå")
        
        st.divider()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
        if st.session_state.analysis_history:
            st.markdown("#### üìú –ò—Å—Ç–æ—Ä–∏—è")
            for record in reversed(st.session_state.analysis_history[-5:]):
                with st.expander(f"üìÑ {record['filename'][:20]}..."):
                    st.text(f"‚è∞ {record['time']}")
                    st.text(f"‚ö° {record['speed']}")
                    st.text(f"‚è±Ô∏è {record['elapsed']}")
        
        st.divider()
        
        st.markdown("""
        #### ‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        
        **–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è** FastQCLI:
        - –ë–µ–∑ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
        - –ü—Ä—è–º–æ–µ HTML –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Sequali
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - ‚úÖ –ü—Ä–æ—Å—Ç–æ—Ç–∞
        - ‚úÖ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        - ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å 300+ MB/sec
        - ‚úÖ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        """)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è fastqcli.py
    if not FASTQCLI_AVAILABLE:
        st.error("""
        ‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**: —Ñ–∞–π–ª `fastqcli.py` –Ω–µ –Ω–∞–π–¥–µ–Ω!
        
        **–†–µ—à–µ–Ω–∏–µ:**
        1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `fastqcli.py` –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º
        2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """)
        st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    render_header()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    render_sidebar()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sequali
    if not check_sequali_installation():
        st.error("Sequali –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.")
        st.stop()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ FASTQ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        type=['fastq', 'fq', 'gz'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .fastq, .fq, .fastq.gz, .fq.gz"
    )
    
    if uploaded_file is not None:
        st.markdown("---")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"**–§–∞–π–ª:** {uploaded_file.name}")
        with col2:
            file_size_mb = uploaded_file.size / (1024 * 1024)
            st.markdown(f"**–†–∞–∑–º–µ—Ä:** {file_size_mb:.2f} MB")
        with col3:
            estimated_time = file_size_mb / 300
            st.markdown(f"**–û—Ü–µ–Ω–∫–∞:** ~{estimated_time:.1f} —Å–µ–∫")
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path = os.path.join(temp_dir, uploaded_file.name)
                with open(file_path, 'wb') as f:
                    f.write(uploaded_file.getbuffer())
                
                # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                output_dir = os.path.join(temp_dir, 'results')
                os.makedirs(output_dir, exist_ok=True)
                
                # –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                st.markdown("---")
                html_path = run_simple_analysis(file_path, output_dir)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
                if html_path:
                    st.markdown("---")
                    st.markdown('<div class="success-message">‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</div>', 
                               unsafe_allow_html=True)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HTML –æ—Ç—á–µ—Ç
                    display_html_report(html_path)
                else:
                    st.markdown('<div class="error-message">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑</div>', 
                               unsafe_allow_html=True)
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p>FastQCLI Simplified v2.0.0 | HTML Proxy Mode | ¬© 2025 TaskContract2025</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()