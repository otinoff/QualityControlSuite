"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
–í–µ—Ä—Å–∏—è: 3.0.2
"""

import streamlit as st
import streamlit.components.v1 as components
from pathlib import Path
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
st.set_page_config(
    page_title="üìä –†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ FastQCLI",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
st.markdown("""
<style>
    /* –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π padding */
    .main > div {
        padding-top: 0rem;
    }
    
    /* –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã */
    .block-container {
        padding-top: 0rem;
        padding-bottom: 0rem;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è */
    .close-button {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 999999;
        background: #ff4b4b;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: bold;
        border: none;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    
    .close-button:hover {
        background: #ff2222;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
    
    /* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π iframe */
    .fullscreen-container {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100vh;
        padding: 0;
        margin: 0;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ */
    .report-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        height: 50px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        padding: 0 20px;
        z-index: 1000;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .report-header h2 {
        margin: 0;
        font-size: 1.2rem;
    }
</style>
""", unsafe_allow_html=True)

def load_metadata():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    metadata_file = Path("data/metadata.json")
    if metadata_file.exists():
        try:
            with open(metadata_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
                for file_id, file_info in data.get("files", {}).items():
                    if "upload_time" in file_info and isinstance(file_info["upload_time"], str):
                        try:
                            file_info["upload_time"] = datetime.fromisoformat(file_info["upload_time"])
                        except:
                            file_info["upload_time"] = datetime.now()
                
                for report_id, report_info in data.get("reports", {}).items():
                    if "creation_time" in report_info and isinstance(report_info["creation_time"], str):
                        try:
                            report_info["creation_time"] = datetime.fromisoformat(report_info["creation_time"])
                        except:
                            report_info["creation_time"] = datetime.now()
                
                return data
        except:
            return {"files": {}, "reports": {}}
    return {"files": {}, "reports": {}}

def display_report_fullscreen(report_path: str, report_info: dict = None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç—á–µ—Ç–µ
    col1, col2, col3 = st.columns([6, 1, 1])
    
    with col1:
        if report_info:
            st.markdown(f"""
            <div style='color: #667eea; font-size: 1.2rem; font-weight: bold;'>
                üìä –û—Ç—á–µ—Ç: {report_info.get('filename', 'Unknown')}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style='color: #667eea; font-size: 1.2rem; font-weight: bold;'>
                üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        if report_info:
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if Path(report_path).exists():
                with open(report_path, 'r', encoding='utf-8') as f:
                    html_content = f.read()
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å",
                    data=html_content,
                    file_name=f"report_{report_info.get('filename', 'unknown')}.html",
                    mime="text/html",
                    use_container_width=True
                )
    
    with col3:
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", type="primary", use_container_width=True):
            st.query_params.clear()
            st.switch_page("streamlit_fastqcli.py")
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if Path(report_path).exists():
        try:
            with open(report_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
            html_content = html_content.replace(
                '<head>',
                '''<head>
                <base target="_self">
                <script>
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å Streamlit –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                document.addEventListener('DOMContentLoaded', function() {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                    var links = document.getElementsByTagName('a');
                    for (var i = 0; i < links.length; i++) {
                        var link = links[i];
                        var href = link.getAttribute('href');
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞ (—è–∫–æ—Ä—å)
                        if (href && href.startsWith('#')) {
                            link.onclick = function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                var target = document.querySelector(this.getAttribute('href'));
                                if (target) {
                                    target.scrollIntoView({behavior: 'smooth'});
                                }
                                return false;
                            };
                        }
                        // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
                        else if (href && (href.startsWith('http') || href.startsWith('https'))) {
                            link.setAttribute('target', '_blank');
                        }
                    }
                });
                </script>'''
            )
            
            # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTML –æ—Ç—á–µ—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
            components.html(
                html_content,
                height=900,  # –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                scrolling=True
            )
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    else:
        st.error("‚ùå –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = st.query_params
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á–µ—Ç–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    report_id = params.get("report_id", None)
    
    if report_id:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = load_metadata()
        reports = metadata.get("reports", {})
        
        if report_id in reports:
            report_info = reports[report_id]
            report_path = report_info.get("report_path", "")
            
            if report_path:
                display_report_fullscreen(report_path, report_info)
            else:
                st.error("‚ùå –ü—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        else:
            st.error(f"‚ùå –û—Ç—á–µ—Ç —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç ID –æ—Ç—á–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
        st.markdown("""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white; padding: 2rem; border-radius: 10px; margin-bottom: 2rem;'>
            <h1 style='margin: 0; font-size: 2rem;'>üìä –†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ FastQCLI</h1>
            <p style='margin-top: 0.5rem; opacity: 0.95;'>–í—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ FASTQ —Ñ–∞–π–ª–æ–≤</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if st.button("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", type="secondary"):
            st.query_params.clear()
            st.switch_page("streamlit_fastqcli.py")
        
        st.markdown("---")
        
        metadata = load_metadata()
        reports = metadata.get("reports", {})
        
        if reports:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            def get_report_time(item):
                creation_time = item[1].get("creation_time", None)
                if creation_time is None:
                    return datetime.min
                if isinstance(creation_time, str):
                    try:
                        return datetime.fromisoformat(creation_time)
                    except:
                        return datetime.min
                if isinstance(creation_time, datetime):
                    return creation_time
                return datetime.min
            
            sorted_reports = sorted(
                reports.items(),
                key=get_report_time,
                reverse=True
            )
            
            # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            col1, col2, col3 = st.columns([2, 1, 1])
            with col1:
                search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞", "")
            with col2:
                st.markdown(f"**–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤:** {len(reports)}")
            with col3:
                st.markdown(" ")  # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
            if search_query:
                sorted_reports = [(rid, rinfo) for rid, rinfo in sorted_reports
                                 if search_query.lower() in rinfo.get("filename", "").lower()]
            
            if sorted_reports:
                st.markdown(f"**–ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤:** {len(sorted_reports)}")
                st.markdown("---")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                for report_id, report_info in sorted_reports:
                    with st.container():
                        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç—á–µ—Ç–∞
                        st.markdown(f"""
                        <div style='background: white; padding: 1.5rem; border-radius: 8px;
                                    margin: 1rem 0; box-shadow: 0 2px 8px rgba(0,0,0,0.05);
                                    border-left: 4px solid #28a745;'>
                            <h4 style='margin: 0; color: #2c3e50;'>üìÑ {report_info.get('filename', 'Unknown')}</h4>
                            <p style='color: #7f8c8d; margin: 0.5rem 0;'>
                                <strong>–°–æ–∑–¥–∞–Ω:</strong> {report_info.get('creation_time', 'Unknown')} |
                                <strong>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</strong> {report_info.get('elapsed_time', 0):.1f} —Å–µ–∫ |
                                <strong>ID:</strong> {report_id[:8]}...
                            </p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        col1, col2, col3 = st.columns([1, 1, 1])
                        
                        with col1:
                            if st.button(f"üëÅÔ∏è –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç", key=f"view_{report_id}", type="primary", use_container_width=True):
                                st.query_params["report_id"] = report_id
                                st.rerun()
                        
                        with col2:
                            # –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                            if Path(report_info["report_path"]).exists():
                                with open(report_info["report_path"], 'r', encoding='utf-8') as f:
                                    html_content = f.read()
                                
                                st.download_button(
                                    label="üì• –°–∫–∞—á–∞—Ç—å HTML",
                                    data=html_content,
                                    file_name=f"report_{report_info['filename']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                                    mime="text/html",
                                    key=f"download_{report_id}",
                                    use_container_width=True
                                )
                            else:
                                st.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", icon="‚ùå")
                        
                        with col3:
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                            if Path(report_info["report_path"]).exists():
                                st.success("‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω", icon="‚úÖ")
                            else:
                                st.error("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", icon="‚ùå")
                        
                        st.markdown("---")
            else:
                st.warning("üîç –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        else:
            # –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤
            st.info("""
            üìù **–†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø—É—Å—Ç**
            
            –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ FASTQ —Ñ–∞–π–ª–æ–≤.
            
            –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç:
            1. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ FASTQ —Ñ–∞–π–ª
            3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
            """)

if __name__ == "__main__":
    main()