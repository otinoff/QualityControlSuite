"""
FastQCLI Advanced Streamlit Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Å–∏—Å—Ç–µ–º–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, —Ä–µ–µ—Å—Ç—Ä–æ–º –æ—Ç—á–µ—Ç–æ–≤ –∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
–í–µ—Ä—Å–∏—è: 3.0.0
"""

import streamlit as st
import streamlit.components.v1 as components
from pathlib import Path
import sys
import os
from datetime import datetime
import tempfile
import time
import json
import hashlib
import shutil
from typing import Optional, Dict, List
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="FastQCLI Advanced",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ fastqcli.py
try:
    from fastqcli import (
        check_and_install_sequali,
        analyze_with_sequali,
        has_command
    )
    FASTQCLI_AVAILABLE = True
except ImportError:
    FASTQCLI_AVAILABLE = False
    st.error("‚ö†Ô∏è –§–∞–π–ª fastqcli.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_DIR = Path("data")
UPLOADED_FILES_DIR = DATA_DIR / "uploaded_files"
REPORTS_DIR = DATA_DIR / "reports"
METADATA_FILE = DATA_DIR / "metadata.json"

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .main-header p {
        font-size: 1.1rem;
        opacity: 0.95;
    }
    
    .file-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border-left: 4px solid #667eea;
    }
    
    .report-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border-left: 4px solid #28a745;
    }
    
    .metrics-container {
        background: #f7f7f7;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 6px;
        border-left: 4px solid #28a745;
    }
    
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 6px;
        border-left: 4px solid #dc3545;
    }
    
    .fullscreen-iframe {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        background: white;
    }
    
    .tab-content {
        padding: 1rem;
    }
</style>
""", unsafe_allow_html=True)


def init_directories():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    UPLOADED_FILES_DIR.mkdir(parents=True, exist_ok=True)
    REPORTS_DIR.mkdir(parents=True, exist_ok=True)
    DATA_DIR.mkdir(parents=True, exist_ok=True)


def get_file_hash(file_content: bytes) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    return hashlib.md5(file_content).hexdigest()


def load_metadata() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    if METADATA_FILE.exists():
        try:
            with open(METADATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime –æ–±—ä–µ–∫—Ç—ã
                for file_id, file_info in data.get("files", {}).items():
                    if "upload_time" in file_info and isinstance(file_info["upload_time"], str):
                        try:
                            file_info["upload_time"] = datetime.fromisoformat(file_info["upload_time"])
                        except:
                            file_info["upload_time"] = datetime.now()
                
                for report_id, report_info in data.get("reports", {}).items():
                    if "creation_time" in report_info and isinstance(report_info["creation_time"], str):
                        try:
                            report_info["creation_time"] = datetime.fromisoformat(report_info["creation_time"])
                        except:
                            report_info["creation_time"] = datetime.now()
                
                return data
        except:
            return {"files": {}, "reports": {}}
    return {"files": {}, "reports": {}}


def save_metadata(metadata: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    metadata_copy = {
        "files": {},
        "reports": {}
    }
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ ISO —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    for file_id, file_info in metadata.get("files", {}).items():
        metadata_copy["files"][file_id] = file_info.copy()
        if "upload_time" in metadata_copy["files"][file_id]:
            if isinstance(metadata_copy["files"][file_id]["upload_time"], datetime):
                metadata_copy["files"][file_id]["upload_time"] = metadata_copy["files"][file_id]["upload_time"].isoformat()
    
    for report_id, report_info in metadata.get("reports", {}).items():
        metadata_copy["reports"][report_id] = report_info.copy()
        if "creation_time" in metadata_copy["reports"][report_id]:
            if isinstance(metadata_copy["reports"][report_id]["creation_time"], datetime):
                metadata_copy["reports"][report_id]["creation_time"] = metadata_copy["reports"][report_id]["creation_time"].isoformat()
    
    with open(METADATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(metadata_copy, f, indent=2, default=str)


def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state"""
    if 'sequali_installed' not in st.session_state:
        st.session_state.sequali_installed = False
    
    if 'metadata' not in st.session_state:
        st.session_state.metadata = load_metadata()
    
    if 'current_tab' not in st.session_state:
        st.session_state.current_tab = "new_analysis"
    
    
    if 'analysis_in_progress' not in st.session_state:
        st.session_state.analysis_in_progress = False


def save_uploaded_file(uploaded_file) -> Optional[str]:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = uploaded_file.getbuffer()
        file_hash = get_file_hash(file_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
        for file_id, file_info in st.session_state.metadata.get("files", {}).items():
            if file_info.get("hash") == file_hash:
                st.info(f"üìå –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏: {file_info['filename']}")
                return file_id
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = UPLOADED_FILES_DIR / f"{file_id}_{uploaded_file.name}"
        with open(file_path, 'wb') as f:
            f.write(file_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        st.session_state.metadata["files"][file_id] = {
            "filename": uploaded_file.name,
            "path": str(file_path),
            "size_mb": len(file_content) / (1024 * 1024),
            "upload_time": datetime.now(),
            "hash": file_hash,
            "analysis_count": 0
        }
        
        save_metadata(st.session_state.metadata)
        return file_id
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None


def run_analysis_with_save(file_id: str) -> Optional[str]:
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞"""
    
    file_info = st.session_state.metadata["files"].get(file_id)
    if not file_info:
        st.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        return None
    
    file_path = file_info["path"]
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—á–µ—Ç–∞
    report_id = str(uuid.uuid4())
    report_dir = REPORTS_DIR / report_id
    report_dir.mkdir(parents=True, exist_ok=True)
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    log_container = st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞", expanded=True)
    logs = []
    
    def add_log(message: str, level: str = "INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        log_msg = f"[{timestamp}] [{level}] {message}"
        logs.append(log_msg)
        with log_container:
            if level == "ERROR":
                st.error(log_msg)
            elif level == "WARNING":
                st.warning(log_msg)
            elif level == "SUCCESS":
                st.success(log_msg)
            else:
                st.text(log_msg)
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
        add_log(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_info['filename']}")
        add_log(f"ID —Ñ–∞–π–ª–∞: {file_id}")
        add_log(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–∞: {report_dir}")
        
        status_text.text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ Sequali...")
        progress_bar.progress(20)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞", f"{file_info['size_mb']:.1f} MB")
        with col2:
            st.metric("üìä –ê–Ω–∞–ª–∏–∑–æ–≤", file_info.get('analysis_count', 0) + 1)
        with col3:
            time_placeholder = st.empty()
            time_placeholder.metric("‚è±Ô∏è –í—Ä–µ–º—è", "0 —Å–µ–∫")
        
        progress_bar.progress(40)
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        add_log("–ó–∞–ø—É—Å–∫–∞—é analyze_with_sequali (HTML only)")
        success = analyze_with_sequali(
            file_path,
            output_dir=str(report_dir),
            save_json=False,
            save_html=True
        )
        
        elapsed_time = time.time() - start_time
        time_placeholder.metric("‚è±Ô∏è –í—Ä–µ–º—è", f"{elapsed_time:.1f} —Å–µ–∫")
        
        progress_bar.progress(80)
        
        if success:
            status_text.text("üìä –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç—á–µ—Ç...")
            add_log("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            
            # –ò—â–µ–º HTML —Ñ–∞–π–ª
            html_files = list(report_dir.glob("*.html"))
            if html_files:
                html_path = html_files[0]
                add_log(f"HTML –æ—Ç—á–µ—Ç –Ω–∞–π–¥–µ–Ω: {html_path.name}", "SUCCESS")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                st.session_state.metadata["reports"][report_id] = {
                    "file_id": file_id,
                    "filename": file_info['filename'],
                    "report_path": str(html_path),
                    "creation_time": datetime.now(),
                    "elapsed_time": elapsed_time,
                    "status": "SUCCESS"
                }
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
                st.session_state.metadata["files"][file_id]["analysis_count"] += 1
                
                save_metadata(st.session_state.metadata)
                
                progress_bar.progress(100)
                status_text.text("")
                
                return report_id
            else:
                add_log("HTML –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                return None
        else:
            progress_bar.progress(100)
            status_text.text("")
            add_log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ", "ERROR")
            return None
            
    except Exception as e:
        progress_bar.progress(100)
        status_text.text("")
        add_log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None


def display_html_report_fullscreen(report_path: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω"""
    try:
        with open(report_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = """
        <div style='position: fixed; top: 10px; right: 10px; z-index: 10000;'>
            <button onclick='window.parent.postMessage("close_fullscreen", "*")' 
                    style='background: #dc3545; color: white; border: none; 
                           padding: 10px 20px; border-radius: 5px; cursor: pointer;
                           font-size: 16px; font-weight: bold;'>
                ‚úï –ó–∞–∫—Ä—ã—Ç—å
            </button>
        </div>
        """
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
        components.html(
            close_button + html_content,
            height=1000,
            scrolling=True
        )
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


def render_header():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    st.markdown("""
    <div class="main-header">
        <h1>üß¨ FastQCLI Advanced</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ FASTQ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ä–µ–µ—Å—Ç—Ä–æ–º –æ—Ç—á–µ—Ç–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)


def render_new_analysis_tab():
    """–í–∫–ª–∞–¥–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ FASTQ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        type=['fastq', 'fq', 'gz'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .fastq, .fq, .fastq.gz, .fq.gz"
    )
    
    if uploaded_file is not None:
        st.markdown("---")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"**–§–∞–π–ª:** {uploaded_file.name}")
        with col2:
            file_size_mb = uploaded_file.size / (1024 * 1024)
            st.markdown(f"**–†–∞–∑–º–µ—Ä:** {file_size_mb:.2f} MB")
        with col3:
            estimated_time = file_size_mb / 300
            st.markdown(f"**–û—Ü–µ–Ω–∫–∞:** ~{estimated_time:.1f} —Å–µ–∫")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary", use_container_width=True):
                st.session_state.analysis_in_progress = True
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file_id = save_uploaded_file(uploaded_file)
                
                if file_id:
                    st.success(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {file_id}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    st.markdown("---")
                    report_id = run_analysis_with_save(file_id)
                    
                    if report_id:
                        st.markdown("---")
                        st.markdown('<div class="success-message">‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</div>', 
                                   unsafe_allow_html=True)
                        
                        report_info = st.session_state.metadata["reports"][report_id]
                        
                        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("üìä –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç", type="primary", use_container_width=True):
                                st.query_params["report_id"] = report_id
                                st.switch_page("pages/2_Report_Viewer.py")
                        with col2:
                            if st.button("üìã –ö —Ä–µ–µ—Å—Ç—Ä—É –æ—Ç—á–µ—Ç–æ–≤", type="secondary", use_container_width=True):
                                st.query_params.clear()
                                st.switch_page("pages/2_Report_Viewer.py")
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
                
                st.session_state.analysis_in_progress = False


def render_files_history_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    st.markdown("### üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    files = st.session_state.metadata.get("files", {})
    
    if not files:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑'.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    def get_file_time(item):
        upload_time = item[1].get("upload_time", None)
        if upload_time is None:
            return datetime.min
        if isinstance(upload_time, str):
            try:
                return datetime.fromisoformat(upload_time)
            except:
                return datetime.min
        if isinstance(upload_time, datetime):
            return upload_time
        return datetime.min
    
    sorted_files = sorted(
        files.items(),
        key=get_file_time,
        reverse=True
    )
    
    for file_id, file_info in sorted_files:
        with st.container():
            st.markdown(f"""
            <div class="file-card">
                <h4>üìÑ {file_info['filename']}</h4>
                <p><strong>ID:</strong> {file_id[:8]}...</p>
                <p><strong>–†–∞–∑–º–µ—Ä:</strong> {file_info['size_mb']:.2f} MB</p>
                <p><strong>–ó–∞–≥—Ä—É–∂–µ–Ω:</strong> {file_info['upload_time']}</p>
                <p><strong>–ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong> {file_info.get('analysis_count', 0)}</p>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", key=f"reanalyze_{file_id}"):
                    st.markdown("---")
                    st.info(f"–ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {file_info['filename']}...")
                    report_id = run_analysis_with_save(file_id)
                    
                    if report_id:
                        st.success("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        report_info = st.session_state.metadata["reports"][report_id]
                        
                        if st.button(f"üìä –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç", key=f"view_report_{report_id}"):
                            st.query_params["report_id"] = report_id
                            st.switch_page("pages/2_Report_Viewer.py")
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ")
            
            with col2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if Path(file_info['path']).exists():
                    st.success("‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    st.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            with col3:
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{file_id}"):
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    try:
                        if Path(file_info['path']).exists():
                            Path(file_info['path']).unlink()
                        del st.session_state.metadata["files"][file_id]
                        
                        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
                        reports_to_delete = []
                        for report_id, report_info in st.session_state.metadata["reports"].items():
                            if report_info.get("file_id") == file_id:
                                reports_to_delete.append(report_id)
                        
                        for report_id in reports_to_delete:
                            del st.session_state.metadata["reports"][report_id]
                        
                        save_metadata(st.session_state.metadata)
                        st.success("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")


def render_reports_registry_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    st.markdown("### üìä –†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤")
    
    reports = st.session_state.metadata.get("reports", {})
    
    if not reports:
        st.info("–†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø—É—Å—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    def get_report_time(item):
        creation_time = item[1].get("creation_time", None)
        if creation_time is None:
            return datetime.min
        if isinstance(creation_time, str):
            try:
                return datetime.fromisoformat(creation_time)
            except:
                return datetime.min
        if isinstance(creation_time, datetime):
            return creation_time
        return datetime.min
    
    sorted_reports = sorted(
        reports.items(),
        key=get_report_time,
        reverse=True
    )
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    with col1:
        search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞", "")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if search_query:
        sorted_reports = [(rid, rinfo) for rid, rinfo in sorted_reports 
                         if search_query.lower() in rinfo.get("filename", "").lower()]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown(f"**–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤:** {len(sorted_reports)}")
    
    for report_id, report_info in sorted_reports:
        with st.container():
            status_color = "#28a745" if report_info.get("status") == "SUCCESS" else "#dc3545"
            
            st.markdown(f"""
            <div class="report-card">
                <h4>üìä –û—Ç—á–µ—Ç –¥–ª—è: {report_info['filename']}</h4>
                <p><strong>ID –æ—Ç—á–µ—Ç–∞:</strong> {report_id[:8]}...</p>
                <p><strong>–°–æ–∑–¥–∞–Ω:</strong> {report_info.get('creation_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</p>
                <p><strong>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</strong> {report_info.get('elapsed_time', 0):.1f} —Å–µ–∫</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: {status_color}; font-weight: bold;">
                    {report_info.get('status', 'UNKNOWN')}</span></p>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button(f"üëÅÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ", key=f"view_{report_id}"):
                    st.query_params["report_id"] = report_id
                    st.switch_page("pages/2_Report_Viewer.py")
            
            with col2:
                # –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                if Path(report_info["report_path"]).exists():
                    with open(report_info["report_path"], 'r', encoding='utf-8') as f:
                        html_content = f.read()
                    
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å",
                        data=html_content,
                        file_name=f"report_{report_info['filename']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                        mime="text/html",
                        key=f"download_{report_id}"
                    )
                else:
                    st.error("–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            with col3:
                if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_report_{report_id}"):
                    try:
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
                        report_path = Path(report_info["report_path"])
                        if report_path.exists():
                            # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–∞
                            shutil.rmtree(report_path.parent)
                        
                        del st.session_state.metadata["reports"][report_id]
                        save_metadata(st.session_state.metadata)
                        st.success("‚úÖ –û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")


def render_sidebar():
    """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å"""
    with st.sidebar:
        st.markdown("### üß¨ FastQCLI Advanced")
        st.caption("v3.0.1 | Extended Features")
        
        st.divider()
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        st.markdown("#### üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        col1, col2 = st.columns(2)
        with col1:
            python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
            st.metric("Python", python_version)
        
        with col2:
            if FASTQCLI_AVAILABLE and has_command('sequali'):
                st.metric("Sequali", "‚úÖ")
            else:
                st.metric("Sequali", "‚ùå")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.divider()
        st.markdown("#### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        files_count = len(st.session_state.metadata.get("files", {}))
        reports_count = len(st.session_state.metadata.get("reports", {}))
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–§–∞–π–ª–æ–≤", files_count)
        with col2:
            st.metric("–û—Ç—á–µ—Ç–æ–≤", reports_count)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–µ—Å—Ç—Ä—É –æ—Ç—á–µ—Ç–æ–≤
        st.divider()
        if st.button("üìä –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤", type="primary", use_container_width=True):
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞
            st.query_params.clear()
            st.switch_page("pages/2_Report_Viewer.py")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        st.divider()
        st.markdown("#### üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                try:
                    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    if UPLOADED_FILES_DIR.exists():
                        shutil.rmtree(UPLOADED_FILES_DIR)
                    if REPORTS_DIR.exists():
                        shutil.rmtree(REPORTS_DIR)
                    
                    # –û—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    st.session_state.metadata = {"files": {}, "reports": {}}
                    save_metadata(st.session_state.metadata)
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    init_directories()
                    
                    st.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        st.divider()
        st.markdown("#### üíæ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç")
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        metadata_json = json.dumps(st.session_state.metadata, indent=2, default=str)
        st.download_button(
            label="üì§ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
            data=metadata_json,
            file_name=f"metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json",
            use_container_width=True
        )
        
        st.divider()
        
        st.markdown("""
        #### ‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        
        **Advanced –≤–µ—Ä—Å–∏—è** FastQCLI:
        - üìÇ –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤
        - üìä –†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤
        - üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        - üñºÔ∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        - üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        
        **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
        - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        - ‚úÖ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        - ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
        - ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """)


def check_sequali_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Sequali"""
    if not FASTQCLI_AVAILABLE:
        return False
    
    if not st.session_state.sequali_installed:
        with st.spinner("üîç –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Sequali..."):
            if not has_command('sequali'):
                st.info("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Sequali...")
                if check_and_install_sequali():
                    st.session_state.sequali_installed = True
                    st.success("‚úÖ Sequali —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Sequali –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    return False
            else:
                st.session_state.sequali_installed = True
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_directories()
    init_session_state()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è fastqcli.py
    if not FASTQCLI_AVAILABLE:
        st.error("""
        ‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞**: —Ñ–∞–π–ª `fastqcli.py` –Ω–µ –Ω–∞–π–¥–µ–Ω!
        
        **–†–µ—à–µ–Ω–∏–µ:**
        1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ `fastqcli.py` –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º
        2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        """)
        st.stop()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    render_header()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    render_sidebar()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sequali
    if not check_sequali_installation():
        st.error("Sequali –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.")
        st.stop()
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
    tab1, tab2, tab3 = st.tabs([
        "üÜï –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
        "üìÇ –ò—Å—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤",
        "üìä –†–µ–µ—Å—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤"
    ])
    
    with tab1:
        render_new_analysis_tab()
    
    with tab2:
        render_files_history_tab()
    
    with tab3:
        render_reports_registry_tab()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p>FastQCLI Advanced v3.0.1 | Extended Features | ¬© 2025 TaskContract2025</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()